#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <time.h>
#include <windows.h>

struct cell_data{

    int x,y;
    int index,num;
    char cell_char;
    bool is_obstacle;
    bool can_be_visited;
    bool is_visited;

}*ptr_cell,*ptr_current_cell,*ptr_neighbour,current_cell,neighbour[4];

void update_maze(int height,int width,struct cell_data *ptr_cell){
    
    printf("Update maze\n");
    int c=0;
    for(int i=0;i<height;i++){
        for(int j=0;j<width;j++){
            if(ptr_cell[c].is_obstacle){
                ptr_cell[c].cell_char='*';
            }
            else{
                ptr_cell[c].cell_char=' ';   
            }
            if(ptr_cell[c].x==0 || ptr_cell[c].x==width-1 || ptr_cell[c].y==0 || ptr_cell[c].y==height-1){
                ptr_cell[c].is_obstacle=true;
                ptr_cell[c].can_be_visited=false;
            }
            if(ptr_cell[c].x==0 && ptr_cell[c].y==height-2){
                ptr_cell[c].cell_char='S';
            }
            else if(ptr_cell[c].x==width-1 && ptr_cell[c].y==1){
                ptr_cell[c].cell_char='E';
            }
            c++;
        }
    }
}

bool valid_cell(int index,int height,int width){
    
    if(index>-1 && index<(height*width)){
        printf("Valid Cell\n");
        return true;
    }
    else{
        return false;
    }
}

void print_maze(struct cell_data *ptr_cell,int height,int width){
    
    printf("Maze_function\n");
    int k=0;
    for(int i=0;i<height;i++){
        for(int j=0;j<width;j++){
            printf("%c ",ptr_cell[k].cell_char);
            k++;
            Sleep(10);
        }
        printf("\n");
    }
    printf("\n");
}

void neighbour_cell_data(struct cell_data *ptr_current_cell,struct cell_data *ptr_cell,int height,int width,struct cell_data *ptr_neighbour){ 
    printf("Neighbour cell\n");
    printf("This %d ",ptr_current_cell->index);
    if(ptr_cell[(ptr_current_cell->index)-width].is_obstacle==true && valid_cell((ptr_current_cell->index)-width,height,width)==true){
        ptr_neighbour[0]=ptr_cell[ptr_current_cell->index-width];
        ptr_neighbour[0].can_be_visited=true;
        printf("Neighbour cell00000\n");
    }
    else{
        ptr_neighbour[0].can_be_visited=false;
    }

    if(ptr_cell[ptr_current_cell->index+1].is_obstacle==false){
        ptr_neighbour[1]=ptr_cell[ptr_current_cell->index+1];
        ptr_neighbour[1].can_be_visited=true;
    }
    else{
        ptr_neighbour[1].can_be_visited=false;
    }

    if(ptr_cell[ptr_current_cell->index+width].is_obstacle==false){
        ptr_neighbour[2]=ptr_cell[ptr_current_cell->index+width];
        ptr_neighbour[2].can_be_visited=true;
    }
    else{
        ptr_neighbour[2].can_be_visited=false;
    }    
    
    if(ptr_cell[ptr_current_cell->index-1].is_obstacle==false){
        ptr_neighbour[3]=ptr_cell[ptr_current_cell->index-1];
        ptr_neighbour[3].can_be_visited=true;
    }
    else{
        ptr_neighbour[3].can_be_visited=false;
    }

}

void dfs(struct cell_data *ptr_current_cell, struct cell_data *ptr_cell,int height,int width,struct cell_data *ptr_neighbour) {
    neighbour_cell_data(ptr_current_cell,ptr_cell,height,width,ptr_neighbour);
    for(int i=0;i<4;i++){
        if(ptr_neighbour[i].can_be_visited){
            ptr_current_cell->is_visited=true;
            ptr_current_cell->is_obstacle=false;
            *ptr_current_cell=ptr_neighbour[i];
            update_maze(height,width,ptr_cell);
            dfs(ptr_current_cell,ptr_cell,height,width,ptr_neighbour);
        }
    }
}

int main(){
    int height,width,k=0;
    
    printf("Enter Height of the maze: ");
    scanf("%d",&height);

    printf("Enter Width of the maze: ");
    scanf("%d",&width);

    printf("\n");

    struct cell_data cell[height*width];

    for(int i=0;i<height;i++){
        for(int j=0;j<width;j++){
            cell[k].index=k;
            cell[k].x=j;
            cell[k].y=i;
            cell[k].is_obstacle=true;
            cell[k].is_visited=false;
            k++;
        }
    }

    current_cell=cell[((height*width)-1)-(width*2)+2];
    ptr_cell=&cell[0];
    ptr_current_cell=&current_cell;
    ptr_neighbour=&neighbour[0];

    dfs(ptr_current_cell,ptr_cell,height,width,ptr_neighbour);
    update_maze(height,width,ptr_cell);
    print_maze(ptr_cell,height,width);

    return 0;
}
